# Generated by Django 4.2.16 on 2024-10-16 17:19

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('flatpages', '0001_initial'),
        ('auth', '0012_alter_user_first_name_max_length'),
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('username', models.CharField(blank=True, max_length=100, null=True, unique=True)),
                ('email', models.EmailField(max_length=255, unique=True, verbose_name='email address')),
                ('email_validated', models.BooleanField(blank=True, default=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('about', models.TextField(blank=True, null=True)),
                ('avatar', models.CharField(blank=True, editable=False, max_length=8196, null=True)),
                ('avatar_title', models.CharField(blank=True, max_length=256, null=True)),
                ('email_notifications', models.BooleanField(default=True)),
                ('email_replies', models.BooleanField(default=True)),
                ('email_messages', models.BooleanField(default=True)),
                ('email_mentions', models.BooleanField(default=True)),
                ('notify_on_new_invitation_request', models.BooleanField(default=False)),
                ('enable_mailing_list', models.BooleanField(default=False)),
                ('enable_mailing_list_comments', models.BooleanField(default=False)),
                ('enable_mailing_list_replies', models.BooleanField(default=False)),
                ('enable_mailing_list_replying', models.BooleanField(default=False)),
                ('show_avatars', models.BooleanField(default=True)),
                ('show_story_previews', models.BooleanField(default=True)),
                ('show_submitted_story_threads', models.BooleanField(default=True)),
                ('show_colors', models.BooleanField(default=True)),
                ('show_stories_with_content_warning', models.BooleanField(default=True)),
                ('homepage', models.URLField(blank=True, null=True)),
                ('git_repository', models.URLField(blank=True, null=True)),
                ('metadata_1', models.CharField(blank=True, max_length=200, null=True)),
                ('metadata_2', models.CharField(blank=True, max_length=200, null=True)),
                ('metadata_3', models.CharField(blank=True, max_length=200, null=True)),
                ('metadata_4', models.CharField(blank=True, max_length=200, null=True)),
                ('metadata_1_label', models.CharField(blank=True, max_length=200, null=True)),
                ('metadata_2_label', models.CharField(blank=True, max_length=200, null=True)),
                ('metadata_3_label', models.CharField(blank=True, max_length=200, null=True)),
                ('metadata_4_label', models.CharField(blank=True, max_length=200, null=True)),
                ('ssh_public_key', models.TextField(blank=True, null=True)),
                ('auth_token', models.TextField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_admin', models.BooleanField(default=False)),
                ('is_moderator', models.BooleanField(default=False)),
                ('banned_by_user', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='banned_by', to=settings.AUTH_USER_MODEL)),
                ('disabled_invite_by_user', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('deleted', models.BooleanField(blank=True, default=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now_add=True)),
                ('text', models.TextField(null=True)),
                ('karma', models.IntegerField(blank=True, default=0)),
                ('message_id', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='CommunityFlatPage',
            fields=[
                ('flatpage_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='flatpages.flatpage')),
                ('link_name', models.TextField(null=True)),
                ('order', models.PositiveIntegerField(blank=True, default=None, null=True)),
                ('show_inline', models.BooleanField(blank=True, default=False)),
                ('show_in_footer', models.BooleanField(blank=True, default=False)),
                ('show_in_header', models.BooleanField(blank=True, default=False)),
                ('show_in_about', models.BooleanField(blank=True, default=True, verbose_name='Show in about page')),
            ],
            bases=('flatpages.flatpage',),
        ),
        migrations.CreateModel(
            name='DocumentationFlatPage',
            fields=[
                ('flatpage_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='flatpages.flatpage')),
                ('link_name', models.TextField(null=True)),
                ('order', models.PositiveIntegerField(blank=True, default=None, null=True)),
                ('show_in_footer', models.BooleanField(blank=True, default=False)),
                ('show_in_header', models.BooleanField(blank=True, default=False)),
                ('show_in_about', models.BooleanField(blank=True, default=True, verbose_name='Show in about page')),
            ],
            bases=('flatpages.flatpage',),
        ),
        migrations.CreateModel(
            name='Domain',
            fields=[
                ('url', models.URLField(primary_key=True, serialize=False, validators=[django.core.validators.MinLengthValidator(5)])),
                ('is_banned', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='ExternalLinkFlatPage',
            fields=[
                ('flatpage_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='flatpages.flatpage')),
                ('link_name', models.TextField()),
                ('external_url', models.URLField()),
                ('order', models.PositiveIntegerField(blank=True, default=None, null=True)),
                ('show_inline', models.BooleanField(blank=True, default=False)),
                ('show_in_footer', models.BooleanField(blank=True, default=False)),
                ('show_in_header', models.BooleanField(blank=True, default=False)),
                ('show_in_about', models.BooleanField(blank=True, default=True, verbose_name='Show in about page')),
            ],
            bases=('flatpages.flatpage',),
        ),
        migrations.CreateModel(
            name='Hat',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('hex_color', models.CharField(blank=True, default='#000000', max_length=7, null=True)),
                ('last_modified', models.DateTimeField(auto_now_add=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='hats', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user', 'name')},
            },
        ),
        migrations.CreateModel(
            name='Invitation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('address', models.EmailField(max_length=254, unique=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('accepted', models.DateTimeField(blank=True, null=True)),
                ('inviter', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='invited', to=settings.AUTH_USER_MODEL)),
                ('receiver', models.OneToOneField(default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='invited_by', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='InvitationRequest',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=20)),
                ('address', models.EmailField(max_length=254, unique=True)),
                ('about', models.TextField()),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('fulfilled_by', models.OneToOneField(default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='request', to='sic.invitation')),
                ('requested_by', models.OneToOneField(default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='invitation_request', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='JobKind',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('dotted_path', models.TextField(unique=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Moderation',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
            ],
        ),
        migrations.CreateModel(
            name='Story',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True, null=True)),
                ('url', models.URLField(null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now_add=True)),
                ('last_active', models.DateTimeField(auto_now_add=True)),
                ('publish_date', models.DateField(blank=True, null=True)),
                ('active', models.BooleanField(default=True)),
                ('pinned', models.DateTimeField(blank=True, default=None, null=True)),
                ('user_is_author', models.BooleanField(default=False)),
                ('content_warning', models.CharField(blank=True, max_length=30, null=True)),
                ('karma', models.IntegerField(blank=True, default=0)),
                ('message_id', models.TextField(blank=True, null=True)),
                ('requires_javascript', models.BooleanField(default=False)),
                ('domain', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='sic.domain')),
            ],
            options={
                'verbose_name_plural': 'stories',
            },
        ),
        migrations.CreateModel(
            name='StoryFilter',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='StoryKind',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=40, unique=True)),
                ('hex_color', models.CharField(blank=True, default='#fffff', max_length=7, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=40, unique=True)),
                ('hex_color', models.CharField(blank=True, default='#ffffff', max_length=7, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('parents', models.ManyToManyField(blank=True, related_name='children', to='sic.tag')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Taggregation',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=20)),
                ('description', models.TextField(blank=True, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now_add=True)),
                ('default', models.BooleanField(default=False)),
                ('discoverable', models.BooleanField(default=False)),
                ('private', models.BooleanField(default=True)),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='created_taggregations', to=settings.AUTH_USER_MODEL)),
                ('moderators', models.ManyToManyField(related_name='moderated_taggregations', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'aggregation',
                'verbose_name_plural': 'aggregations',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='MatchFilter',
            fields=[
                ('storyfilter_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='sic.storyfilter')),
                ('match_string', models.TextField()),
                ('is_regexp', models.BooleanField(default=False)),
            ],
            bases=('sic.storyfilter',),
        ),
        migrations.CreateModel(
            name='StoryRemoteContent',
            fields=[
                ('story', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='remote_content', serialize=False, to='sic.story')),
                ('url', models.URLField()),
                ('content', models.TextField()),
                ('w3m_content', models.TextField(blank=True, max_length=16384, null=True)),
                ('retrieved_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Webmention',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('url', models.URLField()),
                ('source', models.URLField()),
                ('target', models.URLField()),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('was_received', models.BooleanField(default=True)),
                ('story', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='webmentions', to='sic.story')),
            ],
            options={
                'ordering': ['-created', 'story'],
            },
        ),
        migrations.CreateModel(
            name='TaggregationHasTag',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('depth', models.PositiveIntegerField(blank=True, default=0, null=True)),
                ('exclude_filters', models.ManyToManyField(blank=True, related_name='excluded_in', to='sic.storyfilter')),
                ('tag', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='sic.tag')),
                ('taggregation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sic.taggregation')),
            ],
        ),
        migrations.AddField(
            model_name='taggregation',
            name='tags',
            field=models.ManyToManyField(related_name='taggregations', through='sic.TaggregationHasTag', to='sic.tag'),
        ),
        migrations.CreateModel(
            name='StoryBookmark',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now_add=True)),
                ('annotation', models.TextField(blank=True, null=True)),
                ('story', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sic.story')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('story', 'user')},
            },
        ),
        migrations.AddField(
            model_name='story',
            name='kind',
            field=models.ManyToManyField(related_name='stories', to='sic.storykind'),
        ),
        migrations.AddField(
            model_name='story',
            name='merged_into',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='sic.story'),
        ),
        migrations.AddField(
            model_name='story',
            name='tags',
            field=models.ManyToManyField(blank=True, related_name='stories', to='sic.tag'),
        ),
        migrations.AddField(
            model_name='story',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='stories', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=20)),
                ('body', models.TextField(blank=True)),
                ('url', models.URLField(blank=True, null=True)),
                ('kind', models.CharField(choices=[('RE', 'New reply'), ('MEN', 'Mention'), ('MSG', 'New message'), ('MODR', 'A moderator acted on your behalf'), ('OTHR', 'New notification')], default='OTHR', max_length=4)),
                ('read', models.DateTimeField(default=None, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('caused_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ModerationLogEntry',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('action_time', models.DateTimeField(auto_now_add=True)),
                ('action', models.TextField()),
                ('reason', models.TextField()),
                ('change', models.TextField(blank=True, null=True)),
                ('object_id', models.TextField(blank=True, null=True, verbose_name='object id')),
                ('is_public', models.BooleanField(default=True)),
                ('change_is_public', models.BooleanField(default=True)),
                ('content_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='contenttypes.contenttype', verbose_name='content type')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'moderation log entry',
                'verbose_name_plural': 'moderation log entries',
                'ordering': ['-action_time'],
            },
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('read_by_recipient', models.BooleanField(default=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('subject', models.CharField(blank=True, max_length=100)),
                ('body', models.TextField(null=True)),
                ('author', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sent_messages', to=settings.AUTH_USER_MODEL)),
                ('hat', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='sic.hat')),
                ('recipient', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='received_messages', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Job',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('active', models.BooleanField(default=True)),
                ('periodic', models.BooleanField(default=False)),
                ('failed', models.BooleanField(default=False)),
                ('last_run', models.DateTimeField(blank=True, default=None, null=True)),
                ('logs', models.TextField(blank=True, null=True)),
                ('data', models.JSONField(blank=True, null=True)),
                ('kind', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='sic.jobkind')),
            ],
        ),
        migrations.CreateModel(
            name='Digest',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('active', models.BooleanField(default=False)),
                ('all_stories', models.BooleanField(default=True)),
                ('on_days', models.SmallIntegerField(default=64)),
                ('last_run', models.DateTimeField(blank=True, default=None, null=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='email_digest', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='CommentBookmark',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now_add=True)),
                ('annotation', models.TextField(blank=True, null=True)),
                ('comment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sic.comment')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('comment', 'user')},
            },
        ),
        migrations.AddField(
            model_name='comment',
            name='hat',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='sic.hat'),
        ),
        migrations.AddField(
            model_name='comment',
            name='parent',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='replies', to='sic.comment'),
        ),
        migrations.AddField(
            model_name='comment',
            name='story',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='sic.story'),
        ),
        migrations.AddField(
            model_name='comment',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='user',
            name='exclude_filters',
            field=models.ManyToManyField(blank=True, related_name='excluded_in_user', to='sic.storyfilter'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='saved_comments',
            field=models.ManyToManyField(blank=True, related_name='saved_by', through='sic.CommentBookmark', to='sic.comment'),
        ),
        migrations.AddField(
            model_name='user',
            name='saved_stories',
            field=models.ManyToManyField(blank=True, related_name='saved_by', through='sic.StoryBookmark', to='sic.story'),
        ),
        migrations.AddField(
            model_name='user',
            name='taggregation_subscriptions',
            field=models.ManyToManyField(blank=True, related_name='subscribers', to='sic.taggregation'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
        migrations.CreateModel(
            name='DomainFilter',
            fields=[
                ('matchfilter_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='sic.matchfilter')),
            ],
            bases=('sic.matchfilter',),
        ),
        migrations.CreateModel(
            name='TagNameFilter',
            fields=[
                ('matchfilter_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='sic.matchfilter')),
            ],
            bases=('sic.matchfilter',),
        ),
        migrations.CreateModel(
            name='Vote',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('comment', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='votes', to='sic.comment')),
                ('story', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='votes', to='sic.story')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='votes', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user', 'story', 'comment')},
            },
        ),
        migrations.CreateModel(
            name='UserFilter',
            fields=[
                ('storyfilter_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='sic.storyfilter')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            bases=('sic.storyfilter',),
        ),
        migrations.CreateModel(
            name='InvitationRequestVote',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('in_favor', models.BooleanField(blank=True, default=True, null=True)),
                ('note', models.TextField()),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('request', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='votes', to='sic.invitationrequest')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user', 'request')},
            },
        ),
        migrations.CreateModel(
            name='ExactTagFilter',
            fields=[
                ('storyfilter_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='sic.storyfilter')),
                ('tag', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, to='sic.tag')),
            ],
            bases=('sic.storyfilter',),
        ),
    ]
